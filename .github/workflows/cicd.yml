name: Assignment CI/CD

on:
  push:
    branches:
      - '**'

env:
  DOCKER_USERNAME: ps95adagher
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  KUBECONFIG: /etc/kube/config

jobs:
  package:
    name: Package App
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Set version and package
        run: |
          echo "Packaging the app"
          COMMIT_DATE=$(date +%y%m%d)
          SHORT_SHA=$(git rev-parse --short HEAD)
          NEW_VERSION="${COMMIT_DATE}-${SHORT_SHA}"
          echo "New version: $NEW_VERSION"
          mvn versions:set -DnewVersion="$NEW_VERSION" -DgenerateBackupPoms=false
          mvn clean package
          echo "$NEW_VERSION" > version.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: jar-and-version
          path: |
            target/*.jar
            version.txt

  containerize:
    name: Containerize App
    runs-on: ubuntu-latest
    needs: package
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: jar-and-version

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker login
        run: echo "${{ env.DOCKER_PASSWORD }}" | docker login -u ${{ env.DOCKER_USERNAME }} --password-stdin

      - name: Build and Push Docker image
        run: |
          VERSION=$(cat version.txt)
          JAR_NAME=assignment-$VERSION.jar
          docker build --build-arg JAR_FILE=target/$JAR_NAME -t $DOCKER_USERNAME/assignment:$VERSION .
          docker push $DOCKER_USERNAME/assignment:$VERSION

      - name: Upload Docker version
        uses: actions/upload-artifact@v3
        with:
          name: docker-version
          path: version.txt

  deploy_k8s:
    name: Deploy to K8s (non-main branches)
    runs-on: ubuntu-latest
    needs: containerize
    if: github.ref != 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download version file
        uses: actions/download-artifact@v3
        with:
          name: docker-version

      - name: Set K8s namespace and deploy
        run: |
          CI_COMMIT_REF_SLUG=$(echo "${GITHUB_REF##*/}" | tr '[:upper:]' '[:lower:]' | tr '/' '-')
          K8S_NAMESPACE="assignment-${CI_COMMIT_REF_SLUG}"
          VERSION=$(cat version.txt)
          echo "Deploying version $VERSION to namespace $K8S_NAMESPACE"
          helm install task ./progressoft-app --namespace "$K8S_NAMESPACE" --create-namespace -f ./progressoft-app/values.yaml

  deploy_k8s_main:
    name: Deploy to K8s (main branch)
    runs-on: ubuntu-latest
    needs: containerize
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download version file
        uses: actions/download-artifact@v3
        with:
          name: docker-version

      - name: Set K8s namespace and deploy
        run: |
          CI_COMMIT_REF_SLUG=$(echo "${GITHUB_REF##*/}" | tr '[:upper:]' '[:lower:]' | tr '/' '-')
          K8S_NAMESPACE="assignment-${CI_COMMIT_REF_SLUG}"
          VERSION=$(cat version.txt)
          echo "Deploying version $VERSION to namespace $K8S_NAMESPACE"
          helm install task ./progressoft-app --namespace "$K8S_NAMESPACE" --create-namespace -f ./progressoft-app/values.yaml

  cleanup_k8s:
    name: Cleanup K8s (Manual)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set K8s namespace and cleanup
        run: |
          CI_COMMIT_REF_SLUG=$(echo "${GITHUB_REF##*/}" | tr '[:upper:]' '[:lower:]' | tr '/' '-')
          K8S_NAMESPACE="assignment-${CI_COMMIT_REF_SLUG}"
          echo "Uninstalling Helm release from namespace $K8S_NAMESPACE"
          helm uninstall task --namespace "$K8S_NAMESPACE" || echo "Helm release or namespace not found."
